generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Level {
  beginner
  amateur
  professional
}

enum Specialization {
  yoga
  running
  boxing
  stretching
  crossfit
  aerobics
  pilates
}

enum Duration {
  minutes10_30
  minutes30_50
  minutes50_80
  minutes80_100
}

enum Sex {
  man
  female
  empty
}

enum PaymentType {
  visa
  mir
  umoney
}

model Training {
  id             Int       @id @default(autoincrement())
  name           String
  image          String
  level          Level
  specialization Specialization
  duration       Duration
  price          Int
  calories       Int
  description    String
  sex            Sex
  video          String
  rating         Float
  coachId        String    @map("coach_id")
  isSpecialOffer Boolean   @default(false) @map("is_special_offer")
  createDate     DateTime  @default(now()) @map("create_date")
  comments       Comment[]
  orders         Order[]

  @@map("trainings")
}

model Comment {
  id             Int       @id @default(autoincrement())
  userId         String    @map("user_id")
  trainingId     Int       @map("training_id")
  rating         Int
  message        String
  createdAt      DateTime  @default(now()) @map("created_at")
  training       Training  @relation(fields: [trainingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([trainingId, userId])
  @@map("comments")
}

model Order {
  id             Int       @id @default(autoincrement())
  trainingId     Int       @map("training_id")
  userId         String    @map("user_id")
  price          Int
  quantity       Int
  paymentType    String    @map("payment_type")
  createdAt      DateTime  @default(now()) @map("created_at")
  training       Training  @relation(fields: [trainingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("orders")
}
